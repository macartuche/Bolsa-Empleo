<?php// no direct accessdefined( '_JEXEC' ) or die( 'Restricted access' );	$active_url=rtrim(JURI::base(), '/');	if(stristr($active_url, 'administrator')){		//admin panelinde yapılan eklemeyi yoksay			}else {		jimport( 'joomla.plugin.plugin' );			if (!class_exists('lknJobsFunctions')) {			if (!file_exists(JPATH_BASE . DS.'components'.DS.'com_jobs'.DS.'libs'.DS.'common.php')) {				return ;			}			require_once(JPATH_BASE . DS.'components'.DS.'com_jobs'.DS.'libs'.DS.'common.php');		}		class plgUserlknjoomlajobsregister extends JPlugin		{			/**			 * Constructor			 *			 * For php4 compatability we must not use the __constructor as a constructor for plugins			 * because func_get_args ( void ) returns a copy of all passed arguments NOT references.			 * This causes problems with cross-referencing necessary for the observer design pattern.			 *			 * @param 	object $subject The object to observe			 * @param 	array  $config  An array that holds the plugin configuration			 */			function plgUserlknjoomlajobsregister(& $subject, $config) {				parent::__construct($subject, $config);			}						/**			 * Sync the user data with phpBB			 *			 * Method is called after user data is stored in the database			 *			 * @param 	array	  	holds the old user data			 * @param 	boolean		true if a new user is stored			 * @param	boolean		true if user was succesfully stored in the database			 * @param	string		message			 */			function onAfterStoreUser($user_data, $isnew, $succes, $msg)			{				global $auth, $user, $template, $cache, $db, $config;				global $option;				if ($option=='com_comprofiler' || $option=='com_community') {					return FALSE;				}										//Don't continue if the user wasn't stored succesfully				if(!$succes) {					return false;				}										$plugin =& JPluginHelper::getPlugin('user', 'lknjoomlajobsregister');				$params = new JParameter($plugin->params);				$count=lknGetCount("SELECT id FROM #__jobs_resumes WHERE memberid='" . $user_data['id'] . "'");				if ($count!=0) {					return ;				}																$_db2=&lknDb::createInstance();										//eleman şirket bilgisi girmemiş.					//buna göre default resume oluştur					$data=array();					//email					$default_resume_title = $params->get('default_resume_title', 'Default Resume');					$default_resume_status= $params->get('default_resume_status', '0');					$default_resume_language= $params->get('default_resume_language', 'English');					$alias=lknSef::getAlias($default_resume_title);										$data['title']=$default_resume_title;					$data['published']=$default_resume_status;					$data['memberid']=$user_data['id'];					$data['language']=$default_resume_status;					$data['created']=plgUserlknjoomlajobsregister::getDate();					$data['name']=$user_data['name'];					$data['email_address ']=$user_data['email'];					$data['alias']=$alias;										$sql=$_db2->CreateInsertSql($data,"#__jobs_resumes");							$_db2->query($sql);					$_db2->setQuery();										return true;			}								function getDate(){				$date=new lknDate();				$date=$date->getDate();				return $date;							}										}			}	?>