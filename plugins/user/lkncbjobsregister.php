<?php// no direct accessdefined( '_JEXEC' ) or die( 'Restricted access' );	$active_url=rtrim(JURI::base(), '/');		if(stristr($active_url, 'administrator')){		//admin panelinde yapılan eklemeyi yoksay			}else {		//plugin başlangıcı	jimport( 'joomla.plugin.plugin' );			if (!class_exists('lknJobsFunctions')) {			if (!file_exists(JPATH_BASE . DS.'components'.DS.'com_jobs'.DS.'libs'.DS.'common.php')) {				return ;			}			require_once(JPATH_BASE . DS.'components'.DS.'com_jobs'.DS.'libs'.DS.'common.php');		}		class plgUserlkncbjobsregister extends JPlugin		{		/**			 * Constructor			 *			 * For php4 compatability we must not use the __constructor as a constructor for plugins			 * because func_get_args ( void ) returns a copy of all passed arguments NOT references.			 * This causes problems with cross-referencing necessary for the observer design pattern.			 *			 * @param 	object $subject The object to observe			 * @param 	array  $config  An array that holds the plugin configuration			 */			function plgUserlknjoomlajobsregister(& $subject, $config) {				parent::__construct($subject, $config);			}								/**			 * Sync the user data with phpBB			 *			 * Method is called after user data is stored in the database			 *			 * @param 	array	  	holds the old user data			 * @param 	boolean		true if a new user is stored			 * @param	boolean		true if user was succesfully stored in the database			 * @param	string		message			 */			function onAfterStoreUser($user_data, $isnew, $succes, $msg)			{				global $auth, $user, $template, $cache, $db, $config;				global $option;				if ($option=='com_user' || $option=='com_community') {					return FALSE;				}				/*				echo '<pre>';				var_dump($_REQUEST);				echo '</pre>';*/				//Don't continue if the user wasn't stored succesfully				if(!$succes) {					return false;				}				$memberid=$user_data['id'];				$full_name=$user_data['name'];				$email=$user_data['email'];								$plugin =& JPluginHelper::getPlugin('user', 'lkncbjobsregister');				$params = new JParameter($plugin->params);				//print_r($params);					;					//KAYIT OLAN KULLANICI ID'Sİ ALMA İŞLEMİ BAŞLADI			global $_config;						//print_r($rows);		//KAYIT OLAN KULLANICI ID'Sİ ALMA İŞLEMİ BİTTİ		if (strlen($_POST['cb_jobscompanytitle'])>1) {			//yani şirlet bilgisi girilmiş. bu kullanıcı için şirket girişini yap			plgUserlkncbjobsregister::registerCompany($params,$email,$memberid);					}else {			plgUserlkncbjobsregister::registerJobSeeker($params,$email,$memberid,$full_name);		}				}		function registerJobSeeker($params,$email,$memberid,$full_name){			$count=lknGetCount("SELECT id FROM #__jobs_resumes WHERE memberid='$memberid'");			if ($count!=0) {				return FALSE;			}					$_db3=&lknDb::createInstance();						//eleman şirket bilgisi girmemiş.			//buna göre default resume oluştur			$data=array();			//email			$default_resume_title = $params->get('default_resume_title', 'Default Resume');			$default_resume_status= $params->get('default_resume_status', '0');			$default_resume_language= $params->get('default_resume_language', 'English');			$alias=lknSef::getAlias($default_resume_title);						$data['title']=$default_resume_title;			$data['published']=$default_resume_status;			$data['memberid']=$memberid;			$data['language']=$default_resume_status;			$data['created']=plgUserlkncbjobsregister::plgJobsgetDate();			$data['name']=$full_name;			$data['email_address ']=$email;			$data['alias']=$alias;						$sql=$_db3->CreateInsertSql($data,"#__jobs_resumes");			//echo ($sql);			$_db3->query($sql);			$_db3->setQuery();	}		function registerCompany($params,$email,$memberid){		global $_config;				$force=$_config['employer_force'];		$published='0';		//eğer kullanıcı force edilmiş ise default published 0		if ($force=='0') {			$published='1';		}				$count=lknGetCount("SELECT id FROM #__jobs_companies WHERE memberid='$memberid'");		if ($count!=0) {			return FALSE;		}						$_db2=&lknDb::createInstance();							$country    = $params->get('country', '');			$company_title=lknGetParamatre($_POST,'cb_jobscompanytitle');			$company_description=lknGetParamatre($_POST,'cb_jobscompanydescription');			$company_address=lknGetParamatre($_POST,'cb_jobscompanyaddress');			$company_url=lknGetParamatre($_POST,'cb_jobscompanycompanyurl');			$alias=lknSef::getAlias($company_title);						$data=array();			$data['memberid']=$memberid;			$data['title']=$company_title;			$data['alias']=$alias;			$data['country']=$country;			$data['contactemail']=$email;			$data['description']=$company_description;			$data['address']=$company_address;			$data['companyurl']=$company_url;			$data['published']=$published;			$data['created']=plgUserlkncbjobsregister::plgJobsgetDate();						$sql=$_db2->CreateInsertSql($data,"#__jobs_companies");			//echo $sql;			$_db2->query($sql);			$_db2->setQuery();			$id=$_db2->get_insert_id();						plgUserlkncbjobsregister::doMailJobs($id);	}			function doMailJobs($company_id){			global $_config;			//admin'e mail başladı					lknJobsFunctions::adminMail('company',$company_id);				//admin'e mail bitti								//employer'a mail başladı						$inform_user=$_config['employer_inform_on_company_submission'];						if ($inform_user=='1') {							lknJobsFunctions::employerMail('company_submission',$company_id);						}				//emmployer'a mail başladı		}				function plgJobsgetDate(){			$date=new lknDate();			$date=$date->getDate();			return $date;				}	}		//plugin bitişi	}